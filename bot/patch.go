package bot

import (
	"encoding/base64"
	"fmt"
	"regexp"
	"time"

	"github.com/rs/zerolog/log"
	"github.com/spf13/viper"
	"github.com/xanzy/go-gitlab"
)

func (c *Client) FixFile(vulnerable, fix, path string) {
	pid := viper.GetString("gitlab.project")
	branches, _, err := c.Branches.ListBranches(pid, &gitlab.ListBranchesOptions{Search: &fix})
	if err != nil {
		log.Fatal().Err(err)
		return
	}
	exists := false
	for _, branch := range branches {
		if branch.Name == fix {
			exists = true
			break
		}
	}

	if exists {
		log.Info().Msg("Branch found. Reusing existing.")
	} else {
		log.Info().Msg("Branch not found. Creating new one.")
	}

	f, _, _ := c.RepositoryFiles.GetFile(pid, path, &gitlab.GetFileOptions{
		Ref: &vulnerable,
	})
	content := f.Content
	if f.Encoding == "base64" {
		x, _ := base64.StdEncoding.DecodeString(content)
		content = string(x)
	}
	re, _ := regexp.Compile("(FROM[^\n]*\n)")
	content = re.ReplaceAllString(content, fmt.Sprintf("$1# VULN_SCAN_TIME=%v\n", time.Now().Format(time.RFC3339)))
	if f.Encoding == "base64" {
		content = base64.StdEncoding.EncodeToString([]byte(content))
	}
	msg := "Automated vulnerability patch"
	name := "Vulnerabiltiy Bot"
	patch := gitlab.CommitActionOptions{
		Action:   gitlab.FileAction(gitlab.FileUpdate),
		FilePath: &path,
		Content:  &content,
		Encoding: &f.Encoding,
	}
	options := gitlab.CreateCommitOptions{Branch: &fix, CommitMessage: &msg, AuthorName: &name, Actions: []*gitlab.CommitActionOptions{&patch}}
	if !exists {
		options.StartBranch = &vulnerable
	}
	_, _, err = c.Commits.CreateCommit(pid, &options)
	if err != nil {
		log.Fatal().Err(err).Msg("Failed to update file.")
		return
	}
}
