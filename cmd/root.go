package cmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var (
	Token   string
	Host    string
	Project string
	Verbose bool
	rootCmd = &cobra.Command{
		Use:   "vulnerability-bot",
		Short: "Manage GitLab Vulnerability Merge Requests",
		Long:  `Manage GitLab Vulnerability Merge Requests`,
		PersistentPreRun: func(cmd *cobra.Command, args []string) {
			zerolog.TimeFieldFormat = zerolog.TimeFormatUnix

			output := zerolog.ConsoleWriter{Out: os.Stdout}
			if Verbose {
				output.FormatLevel = func(i interface{}) string {
					return strings.ToUpper(fmt.Sprintf("| %-6s|", i))
				}
				zerolog.SetGlobalLevel(zerolog.DebugLevel)
			} else {
				zerolog.SetGlobalLevel(zerolog.InfoLevel)
			}
			log.Logger = zerolog.New(output).With().Caller().Timestamp().Logger()
		},
	}
)

func Execute() error {
	return rootCmd.Execute()
}

func init() {
	rootCmd.PersistentFlags().BoolVarP(&Verbose, "verbose", "v", false, "verbose output")
	rootCmd.PersistentFlags().StringVar(&Token, "token", "", "gitlab token")
	rootCmd.PersistentFlags().StringVar(&Host, "host", "", "gitlab host")
	rootCmd.PersistentFlags().StringVar(&Project, "project", "", "project id or name")
	cobra.OnInitialize(initConfig)
}

func initConfig() {
	err := viper.BindPFlag("gitlab.token", rootCmd.PersistentFlags().Lookup("token"))
	if err != nil {
		log.Fatal().Err(err).
			Msg("Binding gitlab token failed")
	}

	err = viper.BindPFlag("gitlab.host", rootCmd.PersistentFlags().Lookup("host"))
	if err != nil {
		log.Fatal().Err(err).
			Msg("Binding gitlab host failed")
	}

	err = viper.BindPFlag("gitlab.project", rootCmd.PersistentFlags().Lookup("project"))
	if err != nil {
		log.Fatal().Err(err).
			Msg("Binding gitlab project failed")
	}
}
